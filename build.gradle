plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.polarbookshop.catalogservice'
version = '0.0.1'

java {
	sourceCompatibility = '21'
}

ext {
	set('springCloudVersion', "2023.0.2")
	set('testcontainersVersion', "1.17.3")
}

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	runtimeOnly 'org.postgresql:postgresql'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.testcontainers:postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

/*
tasks.bootJar {
	doLast {
		def sourceFile = file("${buildDir}/classes/java/main/META-INF/spring-configuration-metadata.json")
		def destDir = file("/bin/default/META-INF")
		def destFile = file("${destDir}/spring-configuration-metadata.json")

		if (destFile.exists()) {
			destFile.delete()
			println 'Arquivo spring-configuration-metadata.json existente apagado na pasta destino.'
		}

		if (sourceFile.exists()) {
			copy {
				from sourceFile
				into destDir
			}
			println "Arquivo spring-configuration-metadata.json copiado para ${destFile}"
		} else {
			println 'Erro: Arquivo spring-configuration-metadata.json n√£o encontrado na pasta origem.'
		}
	}
}
*/
tasks.jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

bootRun {
	systemProperty 'spring.profiles.active', 'testdata'
}

bootBuildImage {
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION" : "21.*"]
	
	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

